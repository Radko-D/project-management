@{
    ViewData["Title"] = "Tags";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-tags"></i> Tags</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTagModal">
                <i class="fas fa-plus"></i> New Tag
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-8">
        <input type="text" id="searchTags" class="form-control" placeholder="Search tags...">
    </div>
    <div class="col-md-4">
        <button class="btn btn-outline-primary w-100" onclick="loadTags()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div id="tagsContainer">
            <div class="text-center">
                <i class="fas fa-spinner fa-spin"></i> Loading tags...
            </div>
        </div>
    </div>
</div>

<!-- Create Tag Modal -->
<div class="modal fade" id="createTagModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Tag</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTagForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="tagName" class="form-label">Tag Name</label>
                        <input type="text" class="form-control" id="tagName" required>
                    </div>
                    <div class="mb-3">
                        <label for="tagColor" class="form-label">Color</label>
                        <div class="row">
                            <div class="col-md-6">
                                <input type="color" class="form-control form-control-color" id="tagColor" value="#007bff">
                            </div>
                            <div class="col-md-6">
                                <input type="text" class="form-control" id="tagColorHex" value="#007bff" placeholder="#000000">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Preview</label>
                        <div>
                            <span id="tagPreview" class="badge" style="background-color: #007bff;">Tag Name</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Tag</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let tags = [];

        $(document).ready(function() {
            loadTags();
            
            $('#createTagForm').on('submit', handleCreateTag);
            $('#searchTags').on('input', filterTags);
            
            // Color picker synchronization
            $('#tagColor').on('input', function() {
                const color = $(this).val();
                $('#tagColorHex').val(color);
                updateTagPreview();
            });
            
            $('#tagColorHex').on('input', function() {
                const color = $(this).val();
                $('#tagColor').val(color);
                updateTagPreview();
            });
            
            $('#tagName').on('input', updateTagPreview);
            
            updateTagPreview();
        });

        function loadTags() {
            api.get('/tags')
                .then(data => {
                    tags = data;
                    displayTags(tags);
                })
                .catch(error => {
                    console.error('Error loading tags:', error);
                    $('#tagsContainer').html('<div class="alert alert-danger">Error loading tags</div>');
                });
        }

        function displayTags(tagsToShow) {
            const container = $('#tagsContainer');
            
            if (tagsToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No tags found</p></div>');
                return;
            }

            let html = '<div class="row">';
            tagsToShow.forEach(tag => {
                const taskCount = tag.taskTags ? tag.taskTags.length : 0;
                
                html += `
                    <div class="col-md-6 col-lg-3 mb-3">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="mb-3">
                                    <span class="badge fs-6 px-3 py-2" style="background-color: ${tag.color}; color: ${getContrastColor(tag.color)};">
                                        <i class="fas fa-tag"></i> ${tag.name}
                                    </span>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">Color: ${tag.color}</small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">${taskCount} tasks</small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">Created: ${formatDate(tag.createdAt)}</small>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-secondary btn-sm" onclick="editTag(${tag.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteTag(${tag.id})">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function filterTags() {
            const searchTerm = $('#searchTags').val().toLowerCase();
            
            let filtered = tags.filter(tag => {
                return tag.name.toLowerCase().includes(searchTerm);
            });
            
            displayTags(filtered);
        }

        function handleCreateTag(e) {
            e.preventDefault();
            
            const tagData = {
                name: $('#tagName').val(),
                color: $('#tagColor').val()
            };

            api.post('/tags', tagData)
                .then(data => {
                    $('#createTagModal').modal('hide');
                    $('#createTagForm')[0].reset();
                    $('#tagColor').val('#007bff');
                    $('#tagColorHex').val('#007bff');
                    updateTagPreview();
                    loadTags();
                    showAlert('Tag created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating tag:', error);
                    showAlert('Error creating tag', 'danger');
                });
        }

        function updateTagPreview() {
            const name = $('#tagName').val() || 'Tag Name';
            const color = $('#tagColor').val();
            const textColor = getContrastColor(color);
            
            $('#tagPreview').text(name).css({
                'background-color': color,
                'color': textColor
            });
        }

        function getContrastColor(hexColor) {
            // Convert hex to RGB
            const r = parseInt(hexColor.substr(1, 2), 16);
            const g = parseInt(hexColor.substr(3, 2), 16);
            const b = parseInt(hexColor.substr(5, 2), 16);
            
            // Calculate luminance
            const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
            
            // Return black or white based on luminance
            return luminance > 0.5 ? '#000000' : '#ffffff';
        }

        function editTag(id) {
            window.location.href = `/Tags/Edit/${id}`;
        }

        function deleteTag(id) {
            if (!confirm('Are you sure you want to delete this tag?')) return;

            api.delete(`/tags/${id}`)
                .then(success => {
                    if (success) {
                        loadTags();
                        showAlert('Tag deleted successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error deleting tag:', error);
                    showAlert('Error deleting tag', 'danger');
                });
        }
    </script>
}
