@{
    ViewData["Title"] = "Tasks";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-tasks"></i> Tasks</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTaskModal">
                <i class="fas fa-plus"></i> New Task
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <input type="text" id="searchTasks" class="form-control" placeholder="Search tasks...">
    </div>
    <div class="col-md-2">
        <select id="filterStatus" class="form-select">
            <option value="">All Statuses</option>
            <option value="ToDo">To Do</option>
            <option value="InProgress">In Progress</option>
            <option value="InReview">In Review</option>
            <option value="Done">Done</option>
            <option value="Blocked">Blocked</option>
        </select>
    </div>
    <div class="col-md-2">
        <select id="filterPriority" class="form-select">
            <option value="">All Priorities</option>
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
            <option value="Critical">Critical</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="filterBoard" class="form-select">
            <option value="">All Boards</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-outline-primary w-100" onclick="loadTasks()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div id="tasksContainer">
            <div class="text-center">
                <i class="fas fa-spinner fa-spin"></i> Loading tasks...
            </div>
        </div>
    </div>
</div>

<!-- Create Task Modal -->
<div class="modal fade" id="createTaskModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTaskForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="taskTitle" class="form-label">Task Title</label>
                            <input type="text" class="form-control" id="taskTitle" required>
                        </div>
                        <div class="col-md-6">
                            <label for="taskBoard" class="form-label">Board</label>
                            <select class="form-select" id="taskBoard" required>
                                <option value="">Select Board</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="taskDescription" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <label for="taskPriority" class="form-label">Priority</label>
                            <select class="form-select" id="taskPriority">
                                <option value="Low">Low</option>
                                <option value="Medium" selected>Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="taskDueDate" class="form-label">Due Date</label>
                            <input type="date" class="form-control" id="taskDueDate">
                        </div>
                        <div class="col-md-3">
                            <label for="taskEstimatedHours" class="form-label">Est. Hours</label>
                            <input type="number" class="form-control" id="taskEstimatedHours" min="0">
                        </div>
                        <div class="col-md-3">
                            <label for="taskMilestone" class="form-label">Milestone</label>
                            <select class="form-select" id="taskMilestone">
                                <option value="">No Milestone</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Task</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let tasks = [];
        let boards = [];
        let milestones = [];

        $(document).ready(function() {
            loadTasks();
            loadBoards();
            loadMilestones();
            
            $('#createTaskForm').on('submit', handleCreateTask);
            $('#searchTasks').on('input', filterTasks);
            $('#filterStatus, #filterPriority, #filterBoard').on('change', filterTasks);
        });

        function loadTasks() {
            api.get('/tasks')
                .then(data => {
                    tasks = data;
                    displayTasks(tasks);
                })
                .catch(error => {
                    console.error('Error loading tasks:', error);
                    $('#tasksContainer').html('<div class="alert alert-danger">Error loading tasks</div>');
                });
        }

        function loadBoards() {
            api.get('/boards')
                .then(data => {
                    boards = data;
                    populateBoardDropdowns();
                });
        }

        function loadMilestones() {
            api.get('/milestones')
                .then(data => {
                    milestones = data;
                    populateMilestoneDropdown();
                });
        }

        function populateBoardDropdowns() {
            const selects = ['#taskBoard', '#filterBoard'];
            selects.forEach(selectId => {
                const select = $(selectId);
                if (selectId === '#filterBoard') {
                    select.empty().append('<option value="">All Boards</option>');
                } else {
                    select.empty().append('<option value="">Select Board</option>');
                }
                
                boards.forEach(board => {
                    select.append(`<option value="${board.id}">${board.name} (${board.project?.name || 'Unknown Project'})</option>`);
                });
            });
        }

        function populateMilestoneDropdown() {
            const select = $('#taskMilestone');
            select.empty().append('<option value="">No Milestone</option>');
            
            milestones.forEach(milestone => {
                select.append(`<option value="${milestone.id}">${milestone.name}</option>`);
            });
        }

        function displayTasks(tasksToShow) {
            const container = $('#tasksContainer');
            
            if (tasksToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No tasks found</p></div>');
                return;
            }

            let html = '<div class="table-responsive"><table class="table table-hover">';
            html += `
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Board</th>
                        <th>Priority</th>
                        <th>Status</th>
                        <th>Due Date</th>
                        <th>Assignee</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
            `;

            tasksToShow.forEach(task => {
                const priorityClass = getPriorityClass(task.priority);
                const statusClass = getStatusClass(task.status);
                const board = boards.find(b => b.id === task.boardId);
                const assignee = task.assignments && task.assignments.length > 0 ? 
                    task.assignments[0].teamMember?.name : 'Unassigned';

                html += `
                    <tr>
                        <td>
                            <strong>${task.title}</strong>
                            ${task.description ? `<br><small class="text-muted">${task.description.substring(0, 50)}${task.description.length > 50 ? '...' : ''}</small>` : ''}
                        </td>
                        <td>${board?.name || 'Unknown'}</td>
                        <td><span class="badge ${priorityClass}">${task.priority}</span></td>
                        <td><span class="badge ${statusClass}">${task.status}</span></td>
                        <td>${task.dueDate ? formatDate(task.dueDate) : '-'}</td>
                        <td>${assignee}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="viewTask(${task.id})">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn btn-outline-secondary" onclick="editTask(${task.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="deleteTask(${task.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += '</tbody></table></div>';
            container.html(html);
        }

        function filterTasks() {
            const searchTerm = $('#searchTasks').val().toLowerCase();
            const statusFilter = $('#filterStatus').val();
            const priorityFilter = $('#filterPriority').val();
            const boardFilter = $('#filterBoard').val();
            
            let filtered = tasks.filter(task => {
                const matchesSearch = task.title.toLowerCase().includes(searchTerm) || 
                                    (task.description && task.description.toLowerCase().includes(searchTerm));
                const matchesStatus = !statusFilter || task.status === statusFilter;
                const matchesPriority = !priorityFilter || task.priority === priorityFilter;
                const matchesBoard = !boardFilter || task.boardId.toString() === boardFilter;
                
                return matchesSearch && matchesStatus && matchesPriority && matchesBoard;
            });
            
            displayTasks(filtered);
        }

        function handleCreateTask(e) {
            e.preventDefault();
            
            const taskData = {
                title: $('#taskTitle').val(),
                description: $('#taskDescription').val(),
                priority: $('#taskPriority').val(),
                dueDate: $('#taskDueDate').val() || null,
                estimatedHours: $('#taskEstimatedHours').val() || null,
                boardId: parseInt($('#taskBoard').val()),
                milestoneId: $('#taskMilestone').val() || null
            };

            api.post('/tasks', taskData)
                .then(data => {
                    $('#createTaskModal').modal('hide');
                    $('#createTaskForm')[0].reset();
                    loadTasks();
                    showAlert('Task created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating task:', error);
                    showAlert('Error creating task', 'danger');
                });
        }

        function viewTask(id) {
            window.location.href = `/Tasks/Details/${id}`;
        }

        function editTask(id) {
            window.location.href = `/Tasks/Edit/${id}`;
        }

        function deleteTask(id) {
            if (!confirm('Are you sure you want to delete this task?')) return;

            api.delete(`/tasks/${id}`)
                .then(success => {
                    if (success) {
                        loadTasks();
                        showAlert('Task deleted successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error deleting task:', error);
                    showAlert('Error deleting task', 'danger');
                });
        }
    </script>
}