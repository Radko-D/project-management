@{
    ViewData["Title"] = "Task Details";
    var taskId = ViewBag.TaskId;
}

<div id="taskDetailsContainer">
    <div class="text-center">
        <i class="fas fa-spinner fa-spin"></i> Loading task details...
    </div>
</div>

<!-- Add Comment Modal -->
<div class="modal fade" id="addCommentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addCommentForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="commentAuthor" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="commentAuthor" required>
                    </div>
                    <div class="mb-3">
                        <label for="commentContent" class="form-label">Comment</label>
                        <textarea class="form-control" id="commentContent" rows="4" required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Comment</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Assign Member Modal -->
<div class="modal fade" id="assignMemberModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Team Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="assignMemberForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="memberSelect" class="form-label">Select Team Member</label>
                        <select class="form-select" id="memberSelect" required>
                            <option value="">Choose a team member...</option>
                        </select>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Team members from the project's assigned teams will be available for selection.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Assign Member</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Manage Tags Modal -->
<div class="modal fade" id="manageTagsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manage Tags</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Available Tags</label>
                    <div id="availableTags">
                        <div class="text-center">
                            <i class="fas fa-spinner fa-spin"></i> Loading...
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const taskId = @taskId;
        let task = null;
        let availableMembers = [];
        let allTags = [];

        $(document).ready(function() {
            loadTaskDetails();
            loadAvailableMembers();
            loadAllTags();
            
            $('#addCommentForm').on('submit', handleAddComment);
            $('#assignMemberForm').on('submit', handleAssignMember);
        });

        function loadTaskDetails() {
            api.get(`/tasks/${taskId}`)
                .then(data => {
                    task = data;
                    displayTaskDetails();
                })
                .catch(error => {
                    console.error('Error loading task:', error);
                    $('#taskDetailsContainer').html('<div class="alert alert-danger">Error loading task details</div>');
                });
        }

        function loadAvailableMembers() {
            // Load all teams to get available members
            api.get('/teams')
                .then(data => {
                    availableMembers = [];
                    data.forEach(team => {
                        if (team.teamMembers) {
                            team.teamMembers.forEach(member => {
                                member.teamName = team.name;
                                availableMembers.push(member);
                            });
                        }
                    });
                    populateMemberDropdown();
                });
        }

        function loadAllTags() {
            api.get('/tags')
                .then(data => {
                    allTags = data;
                });
        }

        function displayTaskDetails() {
            const priorityClass = getPriorityClass(task.priority);
            const statusClass = getStatusClass(task.status);
            const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && task.status !== 'Done';
            
            const html = `
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h1><i class="fas fa-tasks"></i> ${task.title}</h1>
                                <div class="mb-2">
                                    <span class="badge ${priorityClass} me-2">${task.priority}</span>
                                    <span class="badge ${statusClass} me-2">${task.status}</span>
                                    ${isOverdue ? '<span class="badge bg-danger">Overdue</span>' : ''}
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-outline-primary me-2" onclick="editTask()">
                                    <i class="fas fa-edit"></i> Edit Task
                                </button>
                                <a href="/Tasks" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left"></i> Back to Tasks
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5><i class="fas fa-info-circle"></i> Task Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p><strong>Description:</strong></p>
                                        <p>${task.description || 'No description provided'}</p>
                                        
                                        <p><strong>Board:</strong></p>
                                        <p>${task.board?.name || 'Unknown Board'}</p>
                                        
                                        <p><strong>Project:</strong></p>
                                        <p>${task.board?.project?.name || 'Unknown Project'}</p>
                                    </div>
                                    <div class="col-md-6">
                                        <p><strong>Due Date:</strong></p>
                                        <p>${task.dueDate ? formatDate(task.dueDate) : 'No due date set'}</p>
                                        
                                        <p><strong>Estimated Hours:</strong></p>
                                        <p>${task.estimatedHours || 'Not specified'}</p>
                                        
                                        <p><strong>Actual Hours:</strong></p>
                                        <p>${task.actualHours || 'Not tracked'}</p>
                                        
                                        <p><strong>Created:</strong></p>
                                        <p>${formatDateTime(task.createdAt)}</p>
                                        
                                        <p><strong>Last Updated:</strong></p>
                                        <p>${formatDateTime(task.updatedAt)}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-comments"></i> Comments</h5>
                                <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addCommentModal">
                                    <i class="fas fa-plus"></i> Add Comment
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="commentsList">
                                    ${task.comments && task.comments.length > 0 ? 
                                        task.comments.map(comment => `
                                            <div class="mb-3 pb-3 border-bottom">
                                                <div class="d-flex justify-content-between">
                                                    <strong>${comment.authorName}</strong>
                                                    <small class="text-muted">${formatDateTime(comment.createdAt)}</small>
                                                </div>
                                                <p class="mt-2 mb-0">${comment.content}</p>
                                            </div>
                                        `).join('') : 
                                        '<p class="text-muted">No comments yet</p>'
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-users"></i> Assignments</h5>
                                <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#assignMemberModal">
                                    <i class="fas fa-user-plus"></i> Assign
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="assignmentsList">
                                    ${displayAssignments()}
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-tags"></i> Tags</h5>
                                <button class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#manageTagsModal" onclick="loadTagsModal()">
                                    <i class="fas fa-cog"></i> Manage
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="taskTags">
                                    ${displayTags()}
                                </div>
                            </div>
                        </div>

                        ${task.milestone ? `
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h5><i class="fas fa-flag"></i> Milestone</h5>
                                </div>
                                <div class="card-body">
                                    <strong>${task.milestone.name}</strong>
                                    <p class="text-muted">${task.milestone.description || 'No description'}</p>
                                    <small class="text-muted">Due: ${formatDate(task.milestone.dueDate)}</small>
                                    <div class="mt-2">
                                        <span class="badge ${task.milestone.isCompleted ? 'bg-success' : 'bg-warning'}">
                                            ${task.milestone.isCompleted ? 'Completed' : 'In Progress'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        ` : ''}

                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-chart-line"></i> Progress</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-12 mb-3">
                                        <div class="progress">
                                            <div class="progress-bar ${getProgressColor(task.status)}" 
                                                 style="width: ${getTaskProgress(task.status)}%">
                                                ${getTaskProgress(task.status)}%
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center">
                                    <small class="text-muted">
                                        Status: ${task.status.replace(/([A-Z])/g, ' $1').trim()}
                                    </small>
                                </div>
                                ${task.estimatedHours && task.actualHours ? `
                                    <hr>
                                    <div class="row text-center">
                                        <div class="col-6">
                                            <h4 class="text-primary">${task.estimatedHours}</h4>
                                            <small>Estimated</small>
                                        </div>
                                        <div class="col-6">
                                            <h4 class="text-success">${task.actualHours}</h4>
                                            <small>Actual</small>
                                        </div>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            $('#taskDetailsContainer').html(html);
        }

        function displayAssignments() {
            if (!task.assignments || task.assignments.length === 0) {
                return '<p class="text-muted">No assignments yet</p>';
            }

            return task.assignments.map(assignment => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                    <div>
                        <strong>${assignment.teamMember?.name}</strong>
                        <small class="text-muted d-block">${assignment.teamMember?.role}</small>
                        <small class="text-muted">Assigned: ${formatDate(assignment.assignedAt)}</small>
                    </div>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeAssignment(${assignment.id})">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `).join('');
        }

        function displayTags() {
            if (!task.taskTags || task.taskTags.length === 0) {
                return '<p class="text-muted">No tags assigned</p>';
            }

            return task.taskTags.map(taskTag => 
                `<span class="badge me-1 mb-1" style="background-color: ${taskTag.tag?.color}; color: ${getContrastColor(taskTag.tag?.color)};">
                    ${taskTag.tag?.name}
                    <button type="button" class="btn-close btn-close-white ms-1" style="font-size: 0.7em;" onclick="removeTag(${taskTag.tag?.id})"></button>
                </span>`
            ).join('');
        }

        function populateMemberDropdown() {
            const select = $('#memberSelect');
            select.empty().append('<option value="">Choose a team member...</option>');
            
            // Filter out already assigned members
            const assignedMemberIds = task?.assignments?.map(a => a.teamMemberId) || [];
            const unassignedMembers = availableMembers.filter(member => !assignedMemberIds.includes(member.id));
            
            unassignedMembers.forEach(member => {
                select.append(`<option value="${member.id}">${member.name} (${member.role} - ${member.teamName})</option>`);
            });
        }

        function loadTagsModal() {
            const currentTagIds = task.taskTags?.map(tt => tt.tag?.id) || [];
            
            const html = allTags.map(tag => `
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="tag${tag.id}" 
                           ${currentTagIds.includes(tag.id) ? 'checked' : ''} 
                           onchange="toggleTag(${tag.id}, this.checked)">
                    <label class="form-check-label d-flex align-items-center" for="tag${tag.id}">
                        <span class="badge me-2" style="background-color: ${tag.color}; color: ${getContrastColor(tag.color)};">
                            ${tag.name}
                        </span>
                    </label>
                </div>
            `).join('');
            
            $('#availableTags').html(html);
        }

        function handleAddComment(e) {
            e.preventDefault();
            
            // Since we don't have a comments endpoint, we'll simulate it
            showAlert('Comment functionality would be implemented with a proper API endpoint', 'info');
            $('#addCommentModal').modal('hide');
            $('#addCommentForm')[0].reset();
        }

        function handleAssignMember(e) {
            e.preventDefault();
            
            const memberId = $('#memberSelect').val();
            if (!memberId) return;

            api.post(`/tasks/${taskId}/assign/${memberId}`, {})
                .then(() => {
                    $('#assignMemberModal').modal('hide');
                    loadTaskDetails(); // Reload to show new assignment
                    showAlert('Member assigned successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error assigning member:', error);
                    showAlert('Error assigning member', 'danger');
                });
        }

        function removeAssignment(assignmentId) {
            if (!confirm('Are you sure you want to remove this assignment?')) return;
            
            // We need the member ID for the API call, so we'll find it from the assignment
            const assignment = task.assignments.find(a => a.id === assignmentId);
            if (!assignment) return;

            // For now, we'll use a placeholder since the API might not support direct assignment removal
            showAlert('Assignment removal would require additional API endpoint', 'info');
        }

        function toggleTag(tagId, isChecked) {
            if (isChecked) {
                api.post(`/tasks/${taskId}/tags/${tagId}`, {})
                    .then(() => {
                        loadTaskDetails(); // Reload to show updated tags
                        showAlert('Tag added successfully!', 'success');
                    })
                    .catch(error => {
                        console.error('Error adding tag:', error);
                        showAlert('Error adding tag', 'danger');
                        // Uncheck the checkbox on error
                        $(`#tag${tagId}`).prop('checked', false);
                    });
            } else {
                removeTag(tagId);
            }
        }

        function removeTag(tagId) {
            api.delete(`/tasks/${taskId}/tags/${tagId}`)
                .then(() => {
                    loadTaskDetails(); // Reload to show updated tags
                    showAlert('Tag removed successfully!', 'success');
                    // Update the modal if it's open
                    $(`#tag${tagId}`).prop('checked', false);
                })
                .catch(error => {
                    console.error('Error removing tag:', error);
                    showAlert('Error removing tag', 'danger');
                });
        }

        function getTaskProgress(status) {
            switch(status) {
                case 'ToDo': return 0;
                case 'InProgress': return 50;
                case 'InReview': return 75;
                case 'Done': return 100;
                case 'Blocked': return 25;
                default: return 0;
            }
        }

        function getProgressColor(status) {
            switch(status) {
                case 'ToDo': return 'bg-secondary';
                case 'InProgress': return 'bg-primary';
                case 'InReview': return 'bg-info';
                case 'Done': return 'bg-success';
                case 'Blocked': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function editTask() {
            window.location.href = `/Tasks/Edit/${taskId}`;
        }

        function getContrastColor(hexColor) {
            if (!hexColor) return '#000000';
            const r = parseInt(hexColor.substr(1, 2), 16);
            const g = parseInt(hexColor.substr(3, 2), 16);
            const b = parseInt(hexColor.substr(5, 2), 16);
            const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
            return luminance > 0.5 ? '#000000' : '#ffffff';
        }
    </script>
}