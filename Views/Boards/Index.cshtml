@{
    ViewData["Title"] = "Boards";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-columns"></i> Boards</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createBoardModal">
                <i class="fas fa-plus"></i> New Board
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" id="searchBoards" class="form-control" placeholder="Search boards...">
    </div>
    <div class="col-md-3">
        <select id="filterProject" class="form-select">
            <option value="">All Projects</option>
        </select>
    </div>
    <div class="col-md-3">
        <button class="btn btn-outline-primary w-100" onclick="loadBoards()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div id="boardsContainer">
    <div class="text-center">
        <i class="fas fa-spinner fa-spin"></i> Loading boards...
    </div>
</div>

<!-- Create Board Modal -->
<div class="modal fade" id="createBoardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Board</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createBoardForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="boardName" class="form-label">Board Name</label>
                        <input type="text" class="form-control" id="boardName" required>
                    </div>
                    <div class="mb-3">
                        <label for="boardDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="boardDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="boardProject" class="form-label">Project</label>
                        <select class="form-select" id="boardProject" required>
                            <option value="">Select Project</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Board</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let boards = [];
        let projects = [];

        $(document).ready(function() {
            loadBoards();
            loadProjects();
            
            $('#createBoardForm').on('submit', handleCreateBoard);
            $('#searchBoards').on('input', filterBoards);
            $('#filterProject').on('change', filterBoards);
        });

        function loadBoards() {
            api.get('/boards')
                .then(data => {
                    boards = data;
                    displayBoards(boards);
                })
                .catch(error => {
                    console.error('Error loading boards:', error);
                    $('#boardsContainer').html('<div class="alert alert-danger">Error loading boards</div>');
                });
        }

        function loadProjects() {
            api.get('/projects')
                .then(data => {
                    projects = data;
                    populateProjectDropdowns();
                });
        }

        function populateProjectDropdowns() {
            const selects = ['#boardProject', '#filterProject'];
            selects.forEach(selectId => {
                const select = $(selectId);
                if (selectId === '#filterProject') {
                    select.empty().append('<option value="">All Projects</option>');
                } else {
                    select.empty().append('<option value="">Select Project</option>');
                }
                
                projects.forEach(project => {
                    select.append(`<option value="${project.id}">${project.name}</option>`);
                });
            });
        }

        function displayBoards(boardsToShow) {
            const container = $('#boardsContainer');
            
            if (boardsToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No boards found</p></div>');
                return;
            }

            let html = '<div class="row">';
            boardsToShow.forEach(board => {
                const project = projects.find(p => p.id === board.projectId);
                const taskCount = board.tasks ? board.tasks.length : 0;
                
                html += `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">${board.name}</h6>
                                <span class="badge bg-info">${taskCount} tasks</span>
                            </div>
                            <div class="card-body">
                                <p class="card-text">${board.description || 'No description'}</p>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-project-diagram"></i> ${project?.name || 'Unknown Project'}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar"></i> Created: ${formatDate(board.createdAt)}
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-primary btn-sm" onclick="viewBoard(${board.id})">
                                        <i class="fas fa-eye"></i> View
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="editBoard(${board.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteBoard(${board.id})">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function filterBoards() {
            const searchTerm = $('#searchBoards').val().toLowerCase();
            const projectFilter = $('#filterProject').val();
            
            let filtered = boards.filter(board => {
                const matchesSearch = board.name.toLowerCase().includes(searchTerm) || 
                                    (board.description && board.description.toLowerCase().includes(searchTerm));
                const matchesProject = !projectFilter || board.projectId.toString() === projectFilter;
                
                return matchesSearch && matchesProject;
            });
            
            displayBoards(filtered);
        }

        function handleCreateBoard(e) {
            e.preventDefault();
            
            const boardData = {
                name: $('#boardName').val(),
                description: $('#boardDescription').val(),
                projectId: parseInt($('#boardProject').val())
            };

            api.post('/boards', boardData)
                .then(data => {
                    $('#createBoardModal').modal('hide');
                    $('#createBoardForm')[0].reset();
                    loadBoards();
                    showAlert('Board created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating board:', error);
                    showAlert('Error creating board', 'danger');
                });
        }

        function viewBoard(id) {
            window.location.href = `/Boards/Details/${id}`;
        }

        function editBoard(id) {
            window.location.href = `/Boards/Edit/${id}`;
        }

        function deleteBoard(id) {
            if (!confirm('Are you sure you want to delete this board?')) return;

            api.delete(`/boards/${id}`)
                .then(success => {
                    if (success) {
                        loadBoards();
                        showAlert('Board deleted successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error deleting board:', error);
                    showAlert('Error deleting board', 'danger');
                });
        }

        $(document).ready(function() {
            loadDashboardData();
        });

        function loadDashboardData() {
            // Load projects count
            fetch('/api/projects')
                .then(response => response.json())
                .then(data => {
                    $('#totalProjects').text(data.length);
                    displayRecentProjects(data.slice(0, 5));
                });

            // Load tasks count
            fetch('/api/tasks')
                .then(response => response.json())
                .then(data => {
                    $('#totalTasks').text(data.length);
                    displayRecentTasks(data.slice(0, 5));
                    
                    // Count overdue tasks
                    const now = new Date();
                    const overdue = data.filter(task => 
                        task.dueDate && new Date(task.dueDate) < now && task.status !== 'Done'
                    );
                    $('#overdueTasks').text(overdue.length);
                });

            // Load teams count
            fetch('/api/teams')
                .then(response => response.json())
                .then(data => {
                    $('#totalTeams').text(data.length);
                });
        }

        function displayRecentProjects(projects) {
            const container = $('#recentProjects');
            if (projects.length === 0) {
                container.html('<p class="text-muted">No projects found</p>');
                return;
            }

            let html = '<div class="list-group">';
            projects.forEach(project => {
                const statusClass = getStatusClass(project.status);
                html += `
                    <div class="list-group-item">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${project.name}</h6>
                            <span class="badge ${statusClass}">${project.status}</span>
                        </div>
                        <p class="mb-1">${project.description || 'No description'}</p>
                        <small>Created: ${new Date(project.createdAt).toLocaleDateString()}</small>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function displayRecentTasks(tasks) {
            const container = $('#recentTasks');
            if (tasks.length === 0) {
                container.html('<p class="text-muted">No tasks found</p>');
                return;
            }

            let html = '<div class="list-group">';
            tasks.forEach(task => {
                const priorityClass = getPriorityClass(task.priority);
                const statusClass = getStatusClass(task.status);
                html += `
                    <div class="list-group-item">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">${task.title}</h6>
                            <div>
                                <span class="badge ${priorityClass}">${task.priority}</span>
                                <span class="badge ${statusClass}">${task.status}</span>
                            </div>
                        </div>
                        <p class="mb-1">${task.description || 'No description'}</p>
                        ${task.dueDate ? `<small>Due: ${new Date(task.dueDate).toLocaleDateString()}</small>` : ''}
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function getStatusClass(status) {
            switch(status) {
                case 'Planning': return 'bg-secondary';
                case 'InProgress': return 'bg-primary';
                case 'OnHold': return 'bg-warning';
                case 'Completed': case 'Done': return 'bg-success';
                case 'Cancelled': return 'bg-danger';
                case 'ToDo': return 'bg-light text-dark';
                case 'InReview': return 'bg-info';
                case 'Blocked': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function getPriorityClass(priority) {
            switch(priority) {
                case 'Low': return 'bg-success';
                case 'Medium': return 'bg-warning';
                case 'High': return 'bg-danger';
                case 'Critical': return 'bg-dark';
                default: return 'bg-secondary';
            }
        }
    </script>
}

<div class="row">
    <div class="col-12">
        <h1 class="mb-4"><i class="fas fa-tachometer-alt"></i> Dashboard</h1>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 id="totalProjects">0</h4>
                        <p>Total Projects</p>
                    </div>
                    <i class="fas fa-folder-open fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 id="totalTasks">0</h4>
                        <p>Total Tasks</p>
                    </div>
                    <i class="fas fa-tasks fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 id="totalTeams">0</h4>
                        <p>Total Teams</p>
                    </div>
                    <i class="fas fa-users fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 id="overdueTasks">0</h4>
                        <p>Overdue Tasks</p>
                    </div>
                    <i class="fas fa-exclamation-triangle fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-line"></i> Recent Projects</h5>
            </div>
            <div class="card-body">
                <div id="recentProjects">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin"></i> Loading...
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-list"></i> Recent Tasks</h5>
            </div>
            <div class="card-body">
                <div id="recentTasks">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin"></i> Loading...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>