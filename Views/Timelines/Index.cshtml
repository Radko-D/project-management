@{
    ViewData["Title"] = "Timelines";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-timeline"></i> Timelines</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTimelineModal">
                <i class="fas fa-plus"></i> New Timeline
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" id="searchTimelines" class="form-control" placeholder="Search timelines...">
    </div>
    <div class="col-md-3">
        <select id="filterProject" class="form-select">
            <option value="">All Projects</option>
        </select>
    </div>
    <div class="col-md-3">
        <button class="btn btn-outline-primary w-100" onclick="loadTimelines()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div id="timelinesContainer">
    <div class="text-center">
        <i class="fas fa-spinner fa-spin"></i> Loading timelines...
    </div>
</div>

<!-- Create Timeline Modal -->
<div class="modal fade" id="createTimelineModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Timeline</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTimelineForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="timelineName" class="form-label">Timeline Name</label>
                        <input type="text" class="form-control" id="timelineName" required>
                    </div>
                    <div class="mb-3">
                        <label for="timelineDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="timelineDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="timelineProject" class="form-label">Project</label>
                        <select class="form-select" id="timelineProject" required>
                            <option value="">Select Project</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="timelineStartDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="timelineStartDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="timelineEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="timelineEndDate" required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Timeline</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let timelines = [];
        let projects = [];

        $(document).ready(function() {
            loadTimelines();
            loadProjects();
            
            $('#createTimelineForm').on('submit', handleCreateTimeline);
            $('#searchTimelines').on('input', filterTimelines);
            $('#filterProject').on('change', filterTimelines);
        });

        function loadTimelines() {
            api.get('/timelines')
                .then(data => {
                    timelines = data;
                    displayTimelines(timelines);
                })
                .catch(error => {
                    console.error('Error loading timelines:', error);
                    $('#timelinesContainer').html('<div class="alert alert-danger">Error loading timelines</div>');
                });
        }

        function loadProjects() {
            api.get('/projects')
                .then(data => {
                    projects = data;
                    populateProjectDropdowns();
                });
        }

        function populateProjectDropdowns() {
            const selects = ['#timelineProject', '#filterProject'];
            selects.forEach(selectId => {
                const select = $(selectId);
                if (selectId === '#filterProject') {
                    select.empty().append('<option value="">All Projects</option>');
                } else {
                    select.empty().append('<option value="">Select Project</option>');
                }
                
                projects.forEach(project => {
                    select.append(`<option value="${project.id}">${project.name}</option>`);
                });
            });
        }

        function displayTimelines(timelinesToShow) {
            const container = $('#timelinesContainer');
            
            if (timelinesToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No timelines found</p></div>');
                return;
            }

            let html = '<div class="row">';
            timelinesToShow.forEach(timeline => {
                const project = projects.find(p => p.id === timeline.projectId);
                const duration = Math.ceil((new Date(timeline.endDate) - new Date(timeline.startDate)) / (1000 * 60 * 60 * 24));
                const eventCount = timeline.events ? timeline.events.length : 0;
                
                html += `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">${timeline.name}</h6>
                                <span class="badge bg-info">${eventCount} events</span>
                            </div>
                            <div class="card-body">
                                <p class="card-text">${timeline.description || 'No description'}</p>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-project-diagram"></i> ${project?.name || 'Unknown Project'}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar"></i> ${formatDate(timeline.startDate)} - ${formatDate(timeline.endDate)}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-clock"></i> ${duration} days duration
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-primary btn-sm" onclick="viewTimeline(${timeline.id})">
                                        <i class="fas fa-eye"></i> View
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="editTimeline(${timeline.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteTimeline(${timeline.id})">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function filterTimelines() {
            const searchTerm = $('#searchTimelines').val().toLowerCase();
            const projectFilter = $('#filterProject').val();
            
            let filtered = timelines.filter(timeline => {
                const matchesSearch = timeline.name.toLowerCase().includes(searchTerm) || 
                                    (timeline.description && timeline.description.toLowerCase().includes(searchTerm));
                const matchesProject = !projectFilter || timeline.projectId.toString() === projectFilter;
                
                return matchesSearch && matchesProject;
            });
            
            displayTimelines(filtered);
        }

        function handleCreateTimeline(e) {
            e.preventDefault();
            
            const timelineData = {
                name: $('#timelineName').val(),
                description: $('#timelineDescription').val(),
                projectId: parseInt($('#timelineProject').val()),
                startDate: $('#timelineStartDate').val(),
                endDate: $('#timelineEndDate').val()
            };

            // Validate dates
            if (new Date(timelineData.endDate) <= new Date(timelineData.startDate)) {
                showAlert('End date must be after start date', 'danger');
                return;
            }

            api.post('/timelines', timelineData)
                .then(data => {
                    $('#createTimelineModal').modal('hide');
                    $('#createTimelineForm')[0].reset();
                    loadTimelines();
                    showAlert('Timeline created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating timeline:', error);
                    showAlert('Error creating timeline', 'danger');
                });
        }

        function viewTimeline(id) {
            window.location.href = `/Timelines/Details/${id}`;
        }

        function editTimeline(id) {
            window.location.href = `/Timelines/Edit/${id}`;
        }

        function deleteTimeline(id) {
            if (!confirm('Are you sure you want to delete this timeline?')) return;

            api.delete(`/timelines/${id}`)
                .then(success => {
                    if (success) {
                        loadTimelines();
                        showAlert('Timeline deleted successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error deleting timeline:', error);
                    showAlert('Error deleting timeline', 'danger');
                });
        }
    </script>
}