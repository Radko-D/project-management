@{
    ViewData["Title"] = "Milestones";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-flag"></i> Milestones</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createMilestoneModal">
                <i class="fas fa-plus"></i> New Milestone
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-4">
        <input type="text" id="searchMilestones" class="form-control" placeholder="Search milestones...">
    </div>
    <div class="col-md-3">
        <select id="filterProject" class="form-select">
            <option value="">All Projects</option>
        </select>
    </div>
    <div class="col-md-3">
        <select id="filterStatus" class="form-select">
            <option value="">All Statuses</option>
            <option value="true">Completed</option>
            <option value="false">In Progress</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-outline-primary w-100" onclick="loadMilestones()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div id="milestonesContainer">
    <div class="text-center">
        <i class="fas fa-spinner fa-spin"></i> Loading milestones...
    </div>
</div>

<!-- Create Milestone Modal -->
<div class="modal fade" id="createMilestoneModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Milestone</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createMilestoneForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="milestoneName" class="form-label">Milestone Name</label>
                        <input type="text" class="form-control" id="milestoneName" required>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="milestoneDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneProject" class="form-label">Project</label>
                        <select class="form-select" id="milestoneProject" required>
                            <option value="">Select Project</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="milestoneDueDate" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Milestone</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let milestones = [];
        let projects = [];

        $(document).ready(function() {
            loadMilestones();
            loadProjects();
            
            $('#createMilestoneForm').on('submit', handleCreateMilestone);
            $('#searchMilestones').on('input', filterMilestones);
            $('#filterProject, #filterStatus').on('change', filterMilestones);
        });

        function loadMilestones() {
            api.get('/milestones')
                .then(data => {
                    milestones = data;
                    displayMilestones(milestones);
                })
                .catch(error => {
                    console.error('Error loading milestones:', error);
                    $('#milestonesContainer').html('<div class="alert alert-danger">Error loading milestones</div>');
                });
        }

        function loadProjects() {
            api.get('/projects')
                .then(data => {
                    projects = data;
                    populateProjectDropdowns();
                });
        }

        function populateProjectDropdowns() {
            const selects = ['#milestoneProject', '#filterProject'];
            selects.forEach(selectId => {
                const select = $(selectId);
                if (selectId === '#filterProject') {
                    select.empty().append('<option value="">All Projects</option>');
                } else {
                    select.empty().append('<option value="">Select Project</option>');
                }
                
                projects.forEach(project => {
                    select.append(`<option value="${project.id}">${project.name}</option>`);
                });
            });
        }

        function displayMilestones(milestonesToShow) {
            const container = $('#milestonesContainer');
            
            if (milestonesToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No milestones found</p></div>');
                return;
            }

            let html = '<div class="row">';
            milestonesToShow.forEach(milestone => {
                const project = projects.find(p => p.id === milestone.projectId);
                const statusClass = milestone.isCompleted ? 'bg-success' : 'bg-warning';
                const statusText = milestone.isCompleted ? 'Completed' : 'In Progress';
                const isOverdue = !milestone.isCompleted && new Date(milestone.dueDate) < new Date();
                const taskCount = milestone.tasks ? milestone.tasks.length : 0;
                
                html += `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100 ${isOverdue ? 'border-danger' : ''}">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">${milestone.name}</h6>
                                <span class="badge ${statusClass}">${statusText}</span>
                            </div>
                            <div class="card-body">
                                <p class="card-text">${milestone.description || 'No description'}</p>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-project-diagram"></i> ${project?.name || 'Unknown Project'}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar"></i> Due: ${formatDate(milestone.dueDate)}
                                        ${isOverdue ? '<span class="text-danger">(Overdue)</span>' : ''}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-tasks"></i> ${taskCount} tasks
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-primary btn-sm" onclick="viewMilestone(${milestone.id})">
                                        <i class="fas fa-eye"></i> View
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="editMilestone(${milestone.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteMilestone(${milestone.id})">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function filterMilestones() {
            const searchTerm = $('#searchMilestones').val().toLowerCase();
            const projectFilter = $('#filterProject').val();
            const statusFilter = $('#filterStatus').val();
            
            let filtered = milestones.filter(milestone => {
                const matchesSearch = milestone.name.toLowerCase().includes(searchTerm) || 
                                    (milestone.description && milestone.description.toLowerCase().includes(searchTerm));
                const matchesProject = !projectFilter || milestone.projectId.toString() === projectFilter;
                const matchesStatus = !statusFilter || milestone.isCompleted.toString() === statusFilter;
                
                return matchesSearch && matchesProject && matchesStatus;
            });
            
            displayMilestones(filtered);
        }

        function handleCreateMilestone(e) {
            e.preventDefault();
            
            const milestoneData = {
                name: $('#milestoneName').val(),
                description: $('#milestoneDescription').val(),
                projectId: parseInt($('#milestoneProject').val()),
                dueDate: $('#milestoneDueDate').val(),
                isCompleted: false
            };

            api.post('/milestones', milestoneData)
                .then(data => {
                    $('#createMilestoneModal').modal('hide');
                    $('#createMilestoneForm')[0].reset();
                    loadMilestones();
                    showAlert('Milestone created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating milestone:', error);
                    showAlert('Error creating milestone', 'danger');
                });
        }

        function viewMilestone(id) {
            window.location.href = `/Milestones/Details/${id}`;
        }

        function editMilestone(id) {
            window.location.href = `/Milestones/Edit/${id}`;
        }

        function deleteMilestone(id) {
            if (!confirm('Are you sure you want to delete this milestone?')) return;

            api.delete(`/milestones/${id}`)
                .then(success => {
                    if (success) {
                        loadMilestones();
                        showAlert('Milestone deleted successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error deleting milestone:', error);
                    showAlert('Error deleting milestone', 'danger');
                });
        }
    </script>
}