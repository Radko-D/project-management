@{
    ViewData["Title"] = "Projects";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-folder-open"></i> Projects</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createProjectModal">
                <i class="fas fa-plus"></i> New Project
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" id="searchProjects" class="form-control" placeholder="Search projects...">
    </div>
    <div class="col-md-3">
        <select id="filterStatus" class="form-select">
            <option value="">All Statuses</option>
            <option value="Planning">Planning</option>
            <option value="InProgress">In Progress</option>
            <option value="OnHold">On Hold</option>
            <option value="Completed">Completed</option>
            <option value="Cancelled">Cancelled</option>
        </select>
    </div>
    <div class="col-md-3">
        <button class="btn btn-outline-primary w-100" onclick="loadProjects()">
            <i class="fas fa-sync-alt"></i> Refresh
        </button>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div id="projectsContainer">
            <div class="text-center">
                <i class="fas fa-spinner fa-spin"></i> Loading projects...
            </div>
        </div>
    </div>
</div>

<!-- Create Project Modal -->
<div class="modal fade" id="createProjectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createProjectForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="projectName" class="form-label">Project Name</label>
                        <input type="text" class="form-control" id="projectName" required>
                    </div>
                    <div class="mb-3">
                        <label for="projectDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="projectDescription" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="projectStartDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="projectStartDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="projectEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="projectEndDate">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Project</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Project Modal -->
<div class="modal fade" id="editProjectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editProjectForm">
                <div class="modal-body">
                    <input type="hidden" id="editProjectId">
                    <div class="mb-3">
                        <label for="editProjectName" class="form-label">Project Name</label>
                        <input type="text" class="form-control" id="editProjectName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editProjectDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editProjectDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editProjectStatus" class="form-label">Status</label>
                        <select class="form-select" id="editProjectStatus">
                            <option value="Planning">Planning</option>
                            <option value="InProgress">In Progress</option>
                            <option value="OnHold">On Hold</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="editProjectStartDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="editProjectStartDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="editProjectEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="editProjectEndDate">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Project</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let projects = [];

        $(document).ready(function() {
            loadProjects();
            
            // Set today's date as default start date
            $('#projectStartDate').val(new Date().toISOString().split('T')[0]);
            $('#editProjectStartDate').val(new Date().toISOString().split('T')[0]);

            // Event handlers
            $('#createProjectForm').on('submit', handleCreateProject);
            $('#editProjectForm').on('submit', handleEditProject);
            $('#searchProjects').on('input', filterProjects);
            $('#filterStatus').on('change', filterProjects);
        });

        function loadProjects() {
            fetch('/api/projects')
                .then(response => response.json())
                .then(data => {
                    projects = data;
                    displayProjects(projects);
                })
                .catch(error => {
                    console.error('Error loading projects:', error);
                    $('#projectsContainer').html('<div class="alert alert-danger">Error loading projects</div>');
                });
        }

        function displayProjects(projectsToShow) {
            const container = $('#projectsContainer');
            
            if (projectsToShow.length === 0) {
                container.html('<div class="text-center"><p class="text-muted">No projects found</p></div>');
                return;
            }

            let html = '<div class="row">';
            projectsToShow.forEach(project => {
                const statusClass = getStatusClass(project.status);
                const progress = calculateProgress(project);
                
                html += `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">${project.name}</h6>
                                <span class="badge ${statusClass}">${project.status}</span>
                            </div>
                            <div class="card-body">
                                <p class="card-text">${project.description || 'No description'}</p>
                                <div class="mb-2">
                                    <small class="text-muted">Progress</small>
                                    <div class="progress">
                                        <div class="progress-bar" style="width: ${progress}%">${progress}%</div>
                                    </div>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar"></i> ${new Date(project.startDate).toLocaleDateString()}
                                        ${project.endDate ? ' - ' + new Date(project.endDate).toLocaleDateString() : ''}
                                    </small>
                                </div>
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-columns"></i> ${project.boards ? project.boards.length : 0} boards
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-outline-primary btn-sm" onclick="viewProject(${project.id})">
                                        <i class="fas fa-eye"></i> View
                                    </button>
                                    <button class="btn btn-outline-secondary btn-sm" onclick="editProject(${project.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteProject(${project.id})">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.html(html);
        }

        function calculateProgress(project) {
            if (!project.boards || project.boards.length === 0) return 0;
            
            let totalTasks = 0;
            let completedTasks = 0;
            
            project.boards.forEach(board => {
                if (board.tasks) {
                    totalTasks += board.tasks.length;
                    completedTasks += board.tasks.filter(task => task.status === 'Done').length;
                }
            });
            
            return totalTasks === 0 ? 0 : Math.round((completedTasks / totalTasks) * 100);
        }

        function filterProjects() {
            const searchTerm = $('#searchProjects').val().toLowerCase();
            const statusFilter = $('#filterStatus').val();
            
            let filtered = projects.filter(project => {
                const matchesSearch = project.name.toLowerCase().includes(searchTerm) || 
                                    (project.description && project.description.toLowerCase().includes(searchTerm));
                const matchesStatus = !statusFilter || project.status === statusFilter;
                
                return matchesSearch && matchesStatus;
            });
            
            displayProjects(filtered);
        }

        function handleCreateProject(e) {
            e.preventDefault();
            
            const projectData = {
                name: $('#projectName').val(),
                description: $('#projectDescription').val(),
                startDate: $('#projectStartDate').val(),
                endDate: $('#projectEndDate').val() || null
            };

            fetch('/api/projects', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(projectData)
            })
            .then(response => response.json())
            .then(data => {
                $('#createProjectModal').modal('hide');
                $('#createProjectForm')[0].reset();
                loadProjects();
                showAlert('Project created successfully!', 'success');
            })
            .catch(error => {
                console.error('Error creating project:', error);
                showAlert('Error creating project', 'danger');
            });
        }

        function editProject(id) {
            const project = projects.find(p => p.id === id);
            if (!project) return;

            $('#editProjectId').val(project.id);
            $('#editProjectName').val(project.name);
            $('#editProjectDescription').val(project.description);
            $('#editProjectStatus').val(project.status);
            $('#editProjectStartDate').val(project.startDate.split('T')[0]);
            $('#editProjectEndDate').val(project.endDate ? project.endDate.split('T')[0] : '');
            
            $('#editProjectModal').modal('show');
        }

        function handleEditProject(e) {
            e.preventDefault();
            
            const id = $('#editProjectId').val();
            const projectData = {
                name: $('#editProjectName').val(),
                description: $('#editProjectDescription').val(),
                status: $('#editProjectStatus').val(),
                startDate: $('#editProjectStartDate').val(),
                endDate: $('#editProjectEndDate').val() || null
            };

            fetch(`/api/projects/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(projectData)
            })
            .then(response => response.json())
            .then(data => {
                $('#editProjectModal').modal('hide');
                loadProjects();
                showAlert('Project updated successfully!', 'success');
            })
            .catch(error => {
                console.error('Error updating project:', error);
                showAlert('Error updating project', 'danger');
            });
        }

        function viewProject(id) {
            window.location.href = `/Projects/Details/${id}`;
        }

        function deleteProject(id) {
            if (!confirm('Are you sure you want to delete this project?')) return;

            fetch(`/api/projects/${id}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    loadProjects();
                    showAlert('Project deleted successfully!', 'success');
                } else {
                    throw new Error('Failed to delete project');
                }
            })
            .catch(error => {
                console.error('Error deleting project:', error);
                showAlert('Error deleting project', 'danger');
            });
        }

        function getStatusClass(status) {
            switch(status) {
                case 'Planning': return 'bg-secondary';
                case 'InProgress': return 'bg-primary';
                case 'OnHold': return 'bg-warning';
                case 'Completed': return 'bg-success';
                case 'Cancelled': return 'bg-danger';
                default: return 'bg-secondary';
            }
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            $('body').append(alertHtml);
            
            setTimeout(() => {
                $('.alert').alert('close');
            }, 3000);
        }
    </script>
}