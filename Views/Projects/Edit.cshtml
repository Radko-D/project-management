@{
    ViewData["Title"] = "Edit Project";
    var projectId = ViewBag.ProjectId;
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1><i class="fas fa-edit"></i> Edit Project</h1>
            <a href="/Projects" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Projects
            </a>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5><i class="fas fa-edit"></i> Project Information</h5>
            </div>
            <div class="card-body">
                <form id="editProjectForm">
                    <input type="hidden" id="projectId" value="@projectId">
                    
                    <div class="mb-3">
                        <label for="projectName" class="form-label">Project Name *</label>
                        <input type="text" class="form-control" id="projectName" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="projectDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="projectDescription" rows="4"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="projectStatus" class="form-label">Status</label>
                        <select class="form-select" id="projectStatus" required>
                            <option value="Planning">Planning</option>
                            <option value="InProgress">In Progress</option>
                            <option value="OnHold">On Hold</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <label for="projectStartDate" class="form-label">Start Date *</label>
                            <input type="date" class="form-control" id="projectStartDate" required>
                        </div>
                        <div class="col-md-6">
                            <label for="projectEndDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="projectEndDate">
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Update Project
                        </button>
                        <a href="/Projects/Details/@projectId" class="btn btn-outline-secondary ms-2">
                            <i class="fas fa-times"></i> Cancel
                        </a>
                    </div>
                </form>
            </div>
        </div>

        <!-- Team Management Section -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-users"></i> Team Assignments</h5>
                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#assignTeamModal">
                    <i class="fas fa-plus"></i> Assign Team
                </button>
            </div>
            <div class="card-body">
                <div id="assignedTeamsList">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin"></i> Loading...
                    </div>
                </div>
            </div>
        </div>

        <!-- Milestone Management Section -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-flag"></i> Project Milestones</h5>
                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createMilestoneModal">
                    <i class="fas fa-plus"></i> Create Milestone
                </button>
            </div>
            <div class="card-body">
                <div id="milestonesList">
                    <div class="text-center">
                        <i class="fas fa-spinner fa-spin"></i> Loading...
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5><i class="fas fa-info-circle"></i> Current Information</h5>
            </div>
            <div class="card-body" id="currentInfo">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-line"></i> Quick Statistics</h5>
            </div>
            <div class="card-body" id="quickStats">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Assign Team Modal -->
<div class="modal fade" id="assignTeamModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Team to Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="assignTeamForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="teamSelect" class="form-label">Select Team</label>
                        <select class="form-select" id="teamSelect" required>
                            <option value="">Choose a team...</option>
                        </select>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Teams will have access to all project boards and can be assigned to tasks.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Assign Team</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Create Milestone Modal -->
<div class="modal fade" id="createMilestoneModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Project Milestone</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createMilestoneForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="milestoneName" class="form-label">Milestone Name *</label>
                        <input type="text" class="form-control" id="milestoneName" required>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="milestoneDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDueDate" class="form-label">Due Date *</label>
                        <input type="date" class="form-control" id="milestoneDueDate" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Milestone</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const projectId = @projectId;
        let project = null;
        let availableTeams = [];
        let projectMilestones = [];

        $(document).ready(function() {
            loadProject();
            loadAvailableTeams();
            loadProjectMilestones();
            
            $('#editProjectForm').on('submit', handleProjectSubmit);
            $('#assignTeamForm').on('submit', handleAssignTeam);
            $('#createMilestoneForm').on('submit', handleCreateMilestone);
        });

        function loadProject() {
            api.get(`/projects/${projectId}`)
                .then(data => {
                    project = data;
                    populateForm();
                    displayCurrentInfo();
                    displayQuickStats();
                    displayAssignedTeams();
                    populateTeamDropdown();
                })
                .catch(error => {
                    console.error('Error loading project:', error);
                    showAlert('Error loading project data', 'danger');
                });
        }

        function loadAvailableTeams() {
            api.get('/teams')
                .then(data => {
                    availableTeams = data;
                    populateTeamDropdown();
                });
        }

        function loadProjectMilestones() {
            api.get(`/milestones/project/${projectId}`)
                .then(data => {
                    projectMilestones = data;
                    displayMilestones();
                });
        }

        function populateForm() {
            $('#projectName').val(project.name);
            $('#projectDescription').val(project.description);
            $('#projectStatus').val(project.status);
            $('#projectStartDate').val(project.startDate.split('T')[0]);
            $('#projectEndDate').val(project.endDate ? project.endDate.split('T')[0] : '');
        }

        function displayCurrentInfo() {
            const teamCount = project.projectTeams ? project.projectTeams.length : 0;
            const boardCount = project.boards ? project.boards.length : 0;
            
            const html = `
                <div class="mb-2">
                    <strong>Current Status:</strong>
                    <span class="badge ${getStatusClass(project.status)}">${project.status}</span>
                </div>
                <div class="mb-2">
                    <strong>Created:</strong><br>
                    <small>${formatDateTime(project.createdAt)}</small>
                </div>
                <div class="mb-2">
                    <strong>Last Updated:</strong><br>
                    <small>${formatDateTime(project.updatedAt)}</small>
                </div>
                <div class="mb-2">
                    <strong>Assigned Teams:</strong>
                    <span class="badge bg-primary">${teamCount}</span>
                </div>
                <div class="mb-2">
                    <strong>Project Boards:</strong>
                    <span class="badge bg-info">${boardCount}</span>
                </div>
            `;
            $('#currentInfo').html(html);
        }

        function displayQuickStats() {
            const totalTasks = getTotalTasks();
            const completedTasks = getCompletedTasks();
            const progress = totalTasks === 0 ? 0 : Math.round((completedTasks / totalTasks) * 100);
            
            const html = `
                <div class="row text-center">
                    <div class="col-6">
                        <h4 class="text-primary">${totalTasks}</h4>
                        <small>Total Tasks</small>
                    </div>
                    <div class="col-6">
                        <h4 class="text-success">${completedTasks}</h4>
                        <small>Completed</small>
                    </div>
                </div>
                <hr>
                <div class="mb-2">
                    <div class="d-flex justify-content-between mb-1">
                        <small>Progress</small>
                        <small>${progress}%</small>
                    </div>
                    <div class="progress">
                        <div class="progress-bar" style="width: ${progress}%"></div>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col-6">
                        <h5 class="text-info">${projectMilestones.length}</h5>
                        <small>Milestones</small>
                    </div>
                    <div class="col-6">
                        <h5 class="text-warning">${projectMilestones.filter(m => m.isCompleted).length}</h5>
                        <small>Completed</small>
                    </div>
                </div>
            `;
            $('#quickStats').html(html);
        }

        function displayAssignedTeams() {
            if (!project.projectTeams || project.projectTeams.length === 0) {
                $('#assignedTeamsList').html('<p class="text-muted">No teams assigned yet</p>');
                return;
            }

            const html = project.projectTeams.map(pt => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-3 bg-light rounded">
                    <div>
                        <strong>${pt.team?.name || 'Unknown Team'}</strong>
                        <small class="text-muted d-block">${pt.team?.description || 'No description'}</small>
                        <small class="text-muted">
                            <i class="fas fa-users"></i> ${pt.team?.teamMembers?.length || 0} members
                            | Assigned: ${formatDate(pt.assignedAt)}
                        </small>
                    </div>
                    <div>
                        <a href="/Teams/Details/${pt.team?.id}" class="btn btn-sm btn-outline-primary me-2">
                            <i class="fas fa-eye"></i>
                        </a>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeTeamAssignment(${pt.teamId})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `).join('');

            $('#assignedTeamsList').html(html);
        }

        function displayMilestones() {
            if (!projectMilestones || projectMilestones.length === 0) {
                $('#milestonesList').html('<p class="text-muted">No milestones created yet</p>');
                return;
            }

            const html = projectMilestones.map(milestone => {
                const isOverdue = !milestone.isCompleted && new Date(milestone.dueDate) < new Date();
                const statusClass = milestone.isCompleted ? 'bg-success' : (isOverdue ? 'bg-danger' : 'bg-warning');
                
                return `
                    <div class="d-flex justify-content-between align-items-center mb-2 p-3 bg-light rounded">
                        <div>
                            <strong>${milestone.name}</strong>
                            <span class="badge ${statusClass} ms-2">
                                ${milestone.isCompleted ? 'Completed' : (isOverdue ? 'Overdue' : 'In Progress')}
                            </span>
                            <small class="text-muted d-block">${milestone.description || 'No description'}</small>
                            <small class="text-muted">Due: ${formatDate(milestone.dueDate)}</small>
                        </div>
                        <div>
                            <a href="/Milestones/Edit/${milestone.id}" class="btn btn-sm btn-outline-secondary me-1">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMilestone(${milestone.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            }).join('');

            $('#milestonesList').html(html);
        }

        function populateTeamDropdown() {
            if (!availableTeams.length || !project) return;
            
            const select = $('#teamSelect');
            select.empty().append('<option value="">Choose a team...</option>');
            
            // Filter out already assigned teams
            const assignedTeamIds = project.projectTeams?.map(pt => pt.teamId) || [];
            const unassignedTeams = availableTeams.filter(team => !assignedTeamIds.includes(team.id));
            
            unassignedTeams.forEach(team => {
                const memberCount = team.teamMembers ? team.teamMembers.length : 0;
                select.append(`<option value="${team.id}">${team.name} (${memberCount} members)</option>`);
            });
        }

        function getTotalTasks() {
            if (!project.boards) return 0;
            return project.boards.reduce((total, board) => total + (board.tasks ? board.tasks.length : 0), 0);
        }

        function getCompletedTasks() {
            if (!project.boards) return 0;
            return project.boards.reduce((total, board) => {
                if (board.tasks) {
                    return total + board.tasks.filter(task => task.status === 'Done').length;
                }
                return total;
            }, 0);
        }

        function handleProjectSubmit(e) {
            e.preventDefault();
            
            const projectData = {
                name: $('#projectName').val(),
                description: $('#projectDescription').val(),
                status: $('#projectStatus').val(),
                startDate: $('#projectStartDate').val(),
                endDate: $('#projectEndDate').val() || null
            };

            // Validate dates
            if (projectData.endDate && new Date(projectData.endDate) <= new Date(projectData.startDate)) {
                showAlert('End date must be after start date', 'danger');
                return;
            }

            api.put(`/projects/${projectId}`, projectData)
                .then(data => {
                    showAlert('Project updated successfully!', 'success');
                    loadProject(); // Reload to show updated data
                })
                .catch(error => {
                    console.error('Error updating project:', error);
                    showAlert('Error updating project', 'danger');
                });
        }

        function handleAssignTeam(e) {
            e.preventDefault();
            
            const teamId = $('#teamSelect').val();
            if (!teamId) return;

            api.post(`/teams/${teamId}/projects/${projectId}`, {})
                .then(() => {
                    $('#assignTeamModal').modal('hide');
                    loadProject(); // Reload to show new assignment
                    showAlert('Team assigned successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error assigning team:', error);
                    showAlert('Error assigning team', 'danger');
                });
        }

        function handleCreateMilestone(e) {
            e.preventDefault();
            
            const milestoneData = {
                name: $('#milestoneName').val(),
                description: $('#milestoneDescription').val(),
                dueDate: $('#milestoneDueDate').val(),
                isCompleted: false,
                projectId: parseInt(projectId)
            };

            api.post('/milestones', milestoneData)
                .then(data => {
                    $('#createMilestoneModal').modal('hide');
                    $('#createMilestoneForm')[0].reset();
                    loadProjectMilestones(); // Reload milestones
                    displayQuickStats(); // Update stats
                    showAlert('Milestone created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating milestone:', error);
                    showAlert('Error creating milestone', 'danger');
                });
        }

        function removeTeamAssignment(teamId) {
            if (!confirm('Are you sure you want to remove this team assignment?')) return;
            
            showAlert('Team removal would require additional API endpoint', 'info');
        }

        function deleteMilestone(milestoneId) {
            if (!confirm('Are you sure you want to delete this milestone?')) return;

            api.delete(`/milestones/${milestoneId}`)
                .then(() => {
                    loadProjectMilestones(); // Reload milestones
                    displayQuickStats(); // Update stats
                    showAlert('Milestone deleted successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error deleting milestone:', error);
                    showAlert('Error deleting milestone', 'danger');
                });
        }
    </script>
}