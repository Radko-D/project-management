@{
    ViewData["Title"] = "Project Details";
    var projectId = ViewBag.ProjectId;
}

<div id="projectDetailsContainer">
    <div class="text-center">
        <i class="fas fa-spinner fa-spin"></i> Loading project details...
    </div>
</div>

<!-- Assign Team Modal -->
<div class="modal fade" id="assignTeamModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Team to Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="assignTeamForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="teamSelect" class="form-label">Select Team</label>
                        <select class="form-select" id="teamSelect" required>
                            <option value="">Choose a team...</option>
                        </select>
                    </div>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Teams can be assigned to multiple projects and will have access to all project resources.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Assign Team</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Create Milestone Modal -->
<div class="modal fade" id="createMilestoneModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Project Milestone</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createMilestoneForm">
                <div class="modal-body">
                    <input type="hidden" id="milestoneProjectId" value="@projectId">
                    <div class="mb-3">
                        <label for="milestoneName" class="form-label">Milestone Name *</label>
                        <input type="text" class="form-control" id="milestoneName" required>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="milestoneDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="milestoneDueDate" class="form-label">Due Date *</label>
                        <input type="date" class="form-control" id="milestoneDueDate" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Milestone</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const projectId = @projectId;
        let project = null;
        let availableTeams = [];
        let projectMilestones = [];

        $(document).ready(function() {
            loadProjectDetails();
            loadAvailableTeams();
            
            $('#assignTeamForm').on('submit', handleAssignTeam);
            $('#createMilestoneForm').on('submit', handleCreateMilestone);
        });

        function loadProjectDetails() {
            api.get(`/projects/${projectId}`)
                .then(data => {
                    project = data;
                    displayProjectDetails();
                    loadProjectMilestones();
                })
                .catch(error => {
                    console.error('Error loading project:', error);
                    $('#projectDetailsContainer').html('<div class="alert alert-danger">Error loading project details</div>');
                });
        }

        function loadAvailableTeams() {
            api.get('/teams')
                .then(data => {
                    availableTeams = data;
                    populateTeamDropdown();
                });
        }

        function loadProjectMilestones() {
            api.get(`/milestones/project/${projectId}`)
                .then(data => {
                    projectMilestones = data;
                    displayMilestones();
                });
        }

        function displayProjectDetails() {
            const statusClass = getStatusClass(project.status);
            const progress = calculateProgress(project);
            const teamCount = project.projectTeams ? project.projectTeams.length : 0;
            const boardCount = project.boards ? project.boards.length : 0;
            
            const html = `
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h1><i class="fas fa-folder-open"></i> ${project.name}</h1>
                                <p class="text-muted">${project.description || 'No description'}</p>
                                <div class="mb-2">
                                    <span class="badge ${statusClass} fs-6 me-2">${project.status}</span>
                                    <span class="badge bg-info">${teamCount} teams</span>
                                    <span class="badge bg-primary ms-1">${boardCount} boards</span>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-outline-primary me-2" onclick="editProject()">
                                    <i class="fas fa-edit"></i> Edit Project
                                </button>
                                <a href="/Projects" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left"></i> Back to Projects
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5><i class="fas fa-info-circle"></i> Project Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p><strong>Description:</strong></p>
                                        <p>${project.description || 'No description provided'}</p>
                                        
                                        <p><strong>Status:</strong></p>
                                        <p><span class="badge ${statusClass} fs-6">${project.status}</span></p>
                                        
                                        <p><strong>Progress:</strong></p>
                                        <div class="progress mb-2">
                                            <div class="progress-bar" style="width: ${progress}%">${progress}%</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <p><strong>Timeline:</strong></p>
                                        <p><i class="fas fa-calendar"></i> ${formatDate(project.startDate)} 
                                        ${project.endDate ? ' - ' + formatDate(project.endDate) : ' - Ongoing'}</p>
                                        
                                        <p><strong>Created:</strong></p>
                                        <p>${formatDateTime(project.createdAt)}</p>
                                        
                                        <p><strong>Last Updated:</strong></p>
                                        <p>${formatDateTime(project.updatedAt)}</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-users"></i> Assigned Teams</h5>
                                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#assignTeamModal">
                                    <i class="fas fa-plus"></i> Assign Team
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="assignedTeams">
                                    ${displayAssignedTeams()}
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5><i class="fas fa-flag"></i> Project Milestones</h5>
                                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createMilestoneModal">
                                    <i class="fas fa-plus"></i> Create Milestone
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="projectMilestones">
                                    <div class="text-center">
                                        <i class="fas fa-spinner fa-spin"></i> Loading milestones...
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-columns"></i> Project Boards</h5>
                            </div>
                            <div class="card-body">
                                <div id="boardsList">
                                    ${displayBoards()}
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5><i class="fas fa-chart-pie"></i> Project Statistics</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-6">
                                        <h4 class="text-primary">${teamCount}</h4>
                                        <small>Teams</small>
                                    </div>
                                    <div class="col-6">
                                        <h4 class="text-success">${boardCount}</h4>
                                        <small>Boards</small>
                                    </div>
                                </div>
                                <hr>
                                <div class="row text-center">
                                    <div class="col-6">
                                        <h4 class="text-info">${getTotalTasks()}</h4>
                                        <small>Total Tasks</small>
                                    </div>
                                    <div class="col-6">
                                        <h4 class="text-warning">${getCompletedTasks()}</h4>
                                        <small>Completed</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header">
                                <h5><i class="fas fa-users-cog"></i> Team Members</h5>
                            </div>
                            <div class="card-body">
                                ${displayTeamMembers()}
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-chart-line"></i> Progress Overview</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">Overall Progress</small>
                                    <div class="progress">
                                        <div class="progress-bar bg-primary" style="width: ${progress}%">${progress}%</div>
                                    </div>
                                </div>
                                ${displayMilestoneProgress()}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            $('#projectDetailsContainer').html(html);
        }

        function displayAssignedTeams() {
            if (!project.projectTeams || project.projectTeams.length === 0) {
                return '<p class="text-muted">No teams assigned yet. <a href="#" data-bs-toggle="modal" data-bs-target="#assignTeamModal">Assign the first team</a></p>';
            }

            return project.projectTeams.map(pt => `
                <div class="d-flex justify-content-between align-items-center mb-3 p-3 bg-light rounded">
                    <div>
                        <h6 class="mb-1">${pt.teamName || 'Unknown Team'}</h6>
                        <small class="text-muted">
                            <i class="fas fa-users"></i> ${pt.memberCount} members
                            | <i class="fas fa-calendar"></i> Assigned: ${formatDate(pt.assignedAt)}
                        </small>
                    </div>
                    <div>
                        <a href="/Teams/Details/${pt.teamId}" class="btn btn-sm btn-outline-primary me-2">
                            <i class="fas fa-eye"></i> View
                        </a>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeTeamAssignment(${pt.teamId})">
                            <i class="fas fa-times"></i> Remove
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function displayBoards() {
            if (!project.boards || project.boards.length === 0) {
                return '<p class="text-muted">No boards created yet</p>';
            }

            return project.boards.map(board => `
                <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                    <div>
                        <strong>${board.name}</strong>
                        <small class="text-muted d-block">${board.description || 'No description'}</small>
                    </div>
                    <div>
                        <span class="badge bg-info">${board.tasks ? board.tasks.length : 0} tasks</span>
                        <a href="/Boards/Details/${board.id}" class="btn btn-sm btn-outline-primary ms-2">
                            <i class="fas fa-eye"></i> View
                        </a>
                    </div>
                </div>
            `).join('');
        }

        function displayTeamMembers() {
            if (!project.projectTeams || project.projectTeams.length === 0) {
                return '<p class="text-muted">No team members assigned</p>';
            }

            const allMembers = [];
            project.projectTeams.forEach(pt => {
                if (pt.team?.teamMembers) {
                    pt.team.teamMembers.forEach(member => {
                        member.teamName = pt.team.name;
                        allMembers.push(member);
                    });
                }
            });

            if (allMembers.length === 0) {
                return '<p class="text-muted">No team members found</p>';
            }

            return allMembers.slice(0, 10).map(member => `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div>
                        <strong>${member.name}</strong>
                        <small class="text-muted d-block">${member.role} - ${member.teamName}</small>
                    </div>
                </div>
            `).join('') + (allMembers.length > 10 ? `<small class="text-muted">...and ${allMembers.length - 10} more members</small>` : '');
        }

        function displayMilestones() {
            if (!projectMilestones || projectMilestones.length === 0) {
                $('#projectMilestones').html('<p class="text-muted">No milestones created yet. <a href="#" data-bs-toggle="modal" data-bs-target="#createMilestoneModal">Create the first milestone</a></p>');
                return;
            }

            const html = projectMilestones.map(milestone => {
                const isOverdue = !milestone.isCompleted && new Date(milestone.dueDate) < new Date();
                const statusClass = milestone.isCompleted ? 'bg-success' : (isOverdue ? 'bg-danger' : 'bg-warning');
                const statusText = milestone.isCompleted ? 'Completed' : (isOverdue ? 'Overdue' : 'In Progress');
                const taskCount = milestone.tasks ? milestone.tasks.length : 0;
                const completedTasks = milestone.tasks ? milestone.tasks.filter(t => t.status === 'Done').length : 0;
                
                return `
                    <div class="d-flex justify-content-between align-items-center mb-3 p-3 ${isOverdue ? 'bg-danger bg-opacity-10' : 'bg-light'} rounded">
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="mb-1">${milestone.name}</h6>
                                <span class="badge ${statusClass}">${statusText}</span>
                            </div>
                            <p class="text-muted mb-2">${milestone.description || 'No description'}</p>
                            <div class="row">
                                <div class="col-md-6">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar"></i> Due: ${formatDate(milestone.dueDate)}
                                    </small>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted">
                                        <i class="fas fa-tasks"></i> ${completedTasks}/${taskCount} tasks completed
                                    </small>
                                </div>
                            </div>
                            ${taskCount > 0 ? `
                                <div class="progress mt-2" style="height: 6px;">
                                    <div class="progress-bar bg-success" style="width: ${Math.round((completedTasks / taskCount) * 100)}%"></div>
                                </div>
                            ` : ''}
                        </div>
                        <div class="ms-3">
                            <a href="/Milestones/Details/${milestone.id}" class="btn btn-sm btn-outline-primary me-1">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="/Milestones/Edit/${milestone.id}" class="btn btn-sm btn-outline-secondary me-1">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteMilestone(${milestone.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            $('#projectMilestones').html(html);
        }

        function displayMilestoneProgress() {
            if (!projectMilestones || projectMilestones.length === 0) {
                return '<small class="text-muted">No milestones to track</small>';
            }

            const completedMilestones = projectMilestones.filter(m => m.isCompleted).length;
            const progressPercent = Math.round((completedMilestones / projectMilestones.length) * 100);

            return `
                <div class="mb-2">
                    <small class="text-muted">Milestones Progress</small>
                    <div class="progress" style="height: 6px;">
                        <div class="progress-bar bg-success" style="width: ${progressPercent}%"></div>
                    </div>
                    <small class="text-muted">${completedMilestones}/${projectMilestones.length} completed</small>
                </div>
            `;
        }

        function populateTeamDropdown() {
            if (!availableTeams.length) return;
            
            const select = $('#teamSelect');
            select.empty().append('<option value="">Choose a team...</option>');
            
            // Filter out already assigned teams
            const assignedTeamIds = project?.projectTeams?.map(pt => pt.teamId) || [];
            const unassignedTeams = availableTeams.filter(team => !assignedTeamIds.includes(team.id));
            
            unassignedTeams.forEach(team => {
                const memberCount = team.teamMembers ? team.teamMembers.length : 0;
                select.append(`<option value="${team.id}">${team.name} (${memberCount} members)</option>`);
            });
        }

        function calculateProgress(project) {
            if (!project.boards || project.boards.length === 0) return 0;
            
            let totalTasks = 0;
            let completedTasks = 0;
            
            project.boards.forEach(board => {
                if (board.tasks) {
                    totalTasks += board.tasks.length;
                    completedTasks += board.tasks.filter(task => task.status === 'Done').length;
                }
            });
            
            return totalTasks === 0 ? 0 : Math.round((completedTasks / totalTasks) * 100);
        }

        function getTotalTasks() {
            if (!project.boards) return 0;
            return project.boards.reduce((total, board) => total + (board.tasks ? board.tasks.length : 0), 0);
        }

        function getCompletedTasks() {
            if (!project.boards) return 0;
            return project.boards.reduce((total, board) => {
                if (board.tasks) {
                    return total + board.tasks.filter(task => task.status === 'Done').length;
                }
                return total;
            }, 0);
        }

        function handleAssignTeam(e) {
            e.preventDefault();
            
            const teamId = $('#teamSelect').val();
            if (!teamId) return;

            api.post(`/teams/${teamId}/projects/${projectId}`, {})
                .then(() => {
                    $('#assignTeamModal').modal('hide');
                    loadProjectDetails(); // Reload to show new assignment
                    showAlert('Team assigned successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error assigning team:', error);
                    showAlert('Error assigning team', 'danger');
                });
        }

        function handleCreateMilestone(e) {
            e.preventDefault();
            
            const milestoneData = {
                name: $('#milestoneName').val(),
                description: $('#milestoneDescription').val(),
                dueDate: $('#milestoneDueDate').val(),
                isCompleted: false,
                projectId: parseInt(projectId)
            };

            api.post('/milestones', milestoneData)
                .then(data => {
                    $('#createMilestoneModal').modal('hide');
                    $('#createMilestoneForm')[0].reset();
                    loadProjectMilestones(); // Reload milestones
                    showAlert('Milestone created successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error creating milestone:', error);
                    showAlert('Error creating milestone', 'danger');
                });
        }

        function removeTeamAssignment(teamId) {
            if (!confirm('Are you sure you want to remove this team assignment?')) return;
            
            // Note: This would need a specific API endpoint for removing team assignments
            showAlert('Team removal would require additional API endpoint', 'info');
        }

        function deleteMilestone(milestoneId) {
            if (!confirm('Are you sure you want to delete this milestone?')) return;

            api.delete(`/milestones/${milestoneId}`)
                .then(() => {
                    loadProjectMilestones(); // Reload milestones
                    showAlert('Milestone deleted successfully!', 'success');
                })
                .catch(error => {
                    console.error('Error deleting milestone:', error);
                    showAlert('Error deleting milestone', 'danger');
                });
        }

        function editProject() {
            window.location.href = `/Projects/Edit/${projectId}`;
        }
    </script>
}